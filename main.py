from beanie import init_beanie
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
import asyncio
from aiogram.utils import executor
from datetime import datetime, timedelta

from requests import session
from core.api import Scraper
from core.config import settings
from core.database import db
from core.models.application import ApplicationModel, StatusModel
from core.models.user import SubscriptionModel, UserModel

bot = Bot(settings.TOKEN)
dp = Dispatcher(bot, loop=asyncio.get_event_loop())

scraper = Scraper()


async def notify_subscribers():
    pass


async def startup(dp: Dispatcher):
    # set bot commands
    commands = [
        types.BotCommand(command="/start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
        types.BotCommand(command="/help", description="–î–æ–ø–æ–º–æ–≥–∞"),
        types.BotCommand(
            command="/policy", description="–ü–æ–ª—ñ—Ç–∏–∫–∞ –±–æ—Ç–∞ —Ç–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å"
        ),
        types.BotCommand(command="/cabinet", description="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∫–∞–±—ñ–Ω–µ—Ç"),
        types.BotCommand(command="/link", description="–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä"),
        types.BotCommand(
            command="/unlink",
            description="–í—ñ–¥–≤'—è–∑–∞—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
        ),
        types.BotCommand(command="/subscribe", description="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"),
        types.BotCommand(
            command="/unsubscribe", description="–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å"
        ),
        types.BotCommand(command="/subscriptions", description="–°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–æ–∫"),
    ]

    await bot.set_my_commands(commands)
    await init_beanie(
        database=db,
        document_models=[
            UserModel,
            SubscriptionModel,
            ApplicationModel,
        ],
    )


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        """
             *–í—ñ—Ç–∞—é!*üëã
             
–¶–µ–π –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–ª—è—î –ø—Ä–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ –Ω–∞ _passport.mfa.gov.ua_, —â–æ–± –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º –Ω–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä.
–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cabinet –∞–±–æ /help –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
        
–í–∞–∂–ª–∏–≤–æ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —â–æ —Ü–µ–π –±–æ—Ç *–ù–ï –ü–û–í'–Ø–ó–ê–ù–ò–ô* –∑ –ú–ó–° –£–∫—Ä–∞—ó–Ω–∏, —ñ –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å —á–∏ —Å–≤–æ—î—á–∞—Å–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /policy
        """,
        parse_mode="Markdown",
    )


@dp.message_handler(commands=["policy"])
async def policy(message: types.Message):
    await message.answer(
        """
        *–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è*
–ë–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø–∞—Å–ø–æ—Ä—Ç—É –Ω–∞ —Å–∞–π—Ç—ñ _passport.mfa.gov.ua_ –Ω–µ–∑–∞–ª–µ–∂–Ω–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º, —ñ –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∏–º –∑ –ú–ó–° –£–∫—Ä–∞—ó–Ω–∏.
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞ –Ω–µ –∑–æ–±–æ–≤'—è–∑—É—î –≤–∞—Å –Ω—ñ –¥–æ —á–æ–≥–æ, —ñ –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å —á–∏ —Å–≤–æ—î—á–∞—Å–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞ –≤–∞—à —Å—Ç—Ä–∞—Ö —Ç–∞ —Ä–∏–∑–∏–∫.

*–ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è*
–§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –ø—ñ—Å–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–Ω—è –±–æ—Ç—É –≤–∞—à–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç—ñ _passport.mfa.gov.ua_ –Ω—ñ—è–∫–∏–º —á–∏–Ω–æ–º –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è, —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ª–∏—à–µ –¥–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–Ω—è —Ü—å–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—É –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –≤–µ–±—Å–∞–π—Ç.
–í—Å—ñ —Ä–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π –¥–æ—Å—Ç—É–ø–Ω—ñ (–∫–∞–±—ñ–Ω–µ—Ç, —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É) - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –≤–∞—à Telegram ID, –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –°–µ—Å—ñ—ó _passport.mfa.gov.ua_, —Ç–∞ –≤—Å—ñ —Å—Ç–∞—Ç—É—Å–∏ –∑–∞—è–≤–∫–∏.
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–∞—à—É –∑–≥–æ–¥—É –Ω–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ü–∏—Ö –¥–∞–Ω–∏—Ö.

*–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑—ñ–±—Ä–∞–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è*
–í–∞—à Telegram ID –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—ñ, —ñ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏, –∞ —Ç–∞–∫–æ–∂ –ø—Ä–∏–≤ º—è–∑–∫–∏ —Å–µ—Å—ñ—ó.
–í–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å–µ—Å—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ —à–ª—è—Ö–æ–º –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –≤–µ–±—Å–∞–π—Ç _passport.mfa.gov.ua_.
–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏ –∑–∞—è–≤–∫–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–º—ñ–Ω —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏, —Ç–∞ –∑–≤—ñ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω.

*–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö*
–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –≤–∞—à–∏–º Telegram ID, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ /delete, –∞–±–æ –∑–≤'—è–∑–∞–≤—à–∏—Å—å –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º  @operatorSilence. 

*Source Code*
–ë–æ—Ç –ø–æ—à–∏—Ä—é—î—Ç—å—Å—è –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –≤–∏—Ö—ñ–¥–Ω–∏–º –∫–æ–¥–æ–º, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:
https://github.com/denver-code/passport-status-bot
—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å–µ –≤–∏—â–µ–∑–∞–∑–Ω–∞—á–µ–Ω–µ, –∞–±–æ –∂ –ø—ñ–¥–Ω—è—Ç–∏ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –±–æ—Ç –∑ –≤–ª–∞—Å–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º.
        """,
        parse_mode="Markdown",
    )


@dp.message_handler(regexp=r"^\d{7}$")
async def custom_check(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...")
    await message.answer_chat_action("typing")

    status = scraper.check(message.text, retrive_all=True)
    if not status:
        await _message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    _msg_text = f"–°—Ç–∞—Ç—É—Å–∏ –∑–∞—è–≤–∫–∏ *#{message.text}:*\n\n"

    for i, s in enumerate(status):
        _date = datetime.fromtimestamp(int(s.get("date")) / 1000).strftime(
            "%Y-%m-%d %H:%M"
        )
        _msg_text += f"{i+1}. *{s.get('status')}* \n_{_date}_\n\n"

    await _message.edit_text(_msg_text, parse_mode="Markdown")


@dp.message_handler(commands=["cabinet"])
async def cabinet(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    await message.answer_chat_action("typing")

    _user = await UserModel.find_one({"telgram_id": str(message.from_user.id)})
    if not _user:
        await _message.edit_text(
            "–í–∞—à–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /link \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ /link 1006655"
        )
        return

    _init_message = f"""
  *–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç:*
Telegram ID: `{message.from_user.id}`
–°–µ—Å—ñ—è: `{_user.session_id}`
"""

    await _message.edit_text(
        f"""
{_init_message}
–°—Ç–∞—É—Å–∏ –∑–∞—è–≤–∫–∏:
_–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö..._
        """,
        parse_mode="Markdown",
    )

    application = await ApplicationModel.find_one(
        {
            "session_id": _user.session_id,
        }
    )

    if not application:
        await _message.edit_text(
            f"""
{_init_message}
–°—Ç–∞—É—Å–∏ –∑–∞—è–≤–∫–∏:
_–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞_
            """,
            parse_mode="Markdown",
        )
        return

    _msg_text = f"""
{_init_message}
*–°—Ç–∞—Ç—É—Å–∏ –∑–∞—è–≤–∫–∏:*
"""

    for i, s in enumerate(application.statuses):
        _date = datetime.fromtimestamp(int(s.date) / 1000).strftime("%Y-%m-%d %H:%M")
        _msg_text += f"{i+1}. *{s.status}* \n_{_date}_\n\n"

    _msg_text += f"""
–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {application.last_update.strftime("%Y-%m-%d %H:%M")}
    """

    await _message.edit_text(_msg_text, parse_mode="Markdown")


@dp.message_handler(commands=["link"])
async def link(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...")
    await message.answer_chat_action("typing")

    parts = message.text.split(" ")
    if len(parts) != 2:
        await _message.edit_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /link \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ /link 1006655"
        )
        return

    session_id = parts[1]
    status = scraper.check(session_id, retrive_all=True)
    print(f"{status=}")

    _user = await UserModel.find_one({"telgram_id": str(message.from_user.id)})

    if not status:
        await _message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞, –º–æ–∂–ª–∏–≤–æ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —á–∏ —â–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ñ –≤ –±–∞–∑—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    _application = await ApplicationModel.find_one({"session_id": session_id})
    if not _application:
        _statuses = []
        for s in status:
            _statuses.append(
                StatusModel(
                    status=s.get("status"),
                    date=s.get("date"),
                )
            )
        _application = ApplicationModel(
            session_id=session_id,
            statuses=_statuses,
            last_update=datetime.now(),
        )
        await _application.insert()

    if _user:
        _user.session_id = session_id
        await _user.update()
    else:
        _user = UserModel(
            telgram_id=str(message.from_user.id),
            session_id=session_id,
        )
        await _user.insert()

    await _message.edit_text(
        f"""
–í–∞—à Telegram ID —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ {_user.session_id}
        """
    )


@dp.message_handler(commands=["unlink", "delete"])
async def unlink(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...")
    await message.answer_chat_action("typing")

    _user = await UserModel.find_one({"telgram_id": str(message.from_user.id)})
    if not _user:
        await _message.edit_text(
            "–í–∞—à–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /link \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ /link 1006655"
        )
        return

    await _user.delete()
    await _message.edit_text(
        f"""
–í–∞—à Telegram ID —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–≤'—è–∑–∞–Ω–∏–π –≤—ñ–¥ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ {_user.session_id}
        """
    )


@dp.message_handler(commands=["subscribe"])
async def subscribe(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...")
    await message.answer_chat_action("typing")

    # max of 5 subscriptions
    # get session if from message.text

    parts = message.text.split(" ")
    if len(parts) != 2:
        await _message.edit_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /subscribe \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ /subscribe 1006655"
        )
        return

    session_id = parts[1]

    _subscription = await SubscriptionModel.find_one(
        {"telgram_id": str(message.from_user.id), "session_id": session_id}
    )
    if _subscription:
        await _message.edit_text(
            "–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏"
        )
        return

    _count_subscriptions = await SubscriptionModel.find_all(
        {"telgram_id": str(message.from_user.id)}
    ).count()
    if _count_subscriptions >= 5:
        await _message.edit_text(
            "–í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏"
        )
        return

    _subscription = SubscriptionModel(
        telgram_id=str(message.from_user.id),
        session_id=session_id,
    )
    await _subscription.insert()

    await _message.edit_text(
        f"""
–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
        """
    )


@dp.message_handler(commands=["unsubscribe"])
async def unsubscribe(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...")
    await message.answer_chat_action("typing")
    parts = message.text.split(" ")
    if len(parts) != 2:
        await _message.edit_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /unsubscribe \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ /unsubscribe 1006655"
        )
        return

    session_id = parts[1]

    _subscription = await SubscriptionModel.find_one(
        {"telgram_id": str(message.from_user.id), "session_id": session_id}
    )
    if not _subscription:
        await _message.edit_text(
            "–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏"
        )
        return

    await _subscription.delete()

    await _message.edit_text(
        f"""
–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
        """
    )


@dp.message_handler(commands=["subscriptions"])
async def subscriptions(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    await message.answer_chat_action("typing")

    _subscriptions = await SubscriptionModel.find(
        {"telgram_id": str(message.from_user.id)}
    ).to_list()

    if not _subscriptions:
        await _message.edit_text(
            "–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏"
        )
        return

    _msg_text = f"""
*–í–∞—à—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:*
"""

    for i, s in enumerate(_subscriptions):
        _msg_text += f"{i+1}. *{s.session_id}* \n"

    _msg_text += f"""
–í—Å—å–æ–≥–æ: {len(_subscriptions)}"""

    await _message.edit_text(_msg_text, parse_mode="Markdown")


@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    await message.answer(
        """
*–û—Å–Ω–æ–≤–Ω—ñ:*
/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –¥–æ–ø–æ–º–æ–≥–∞
/policy - –ø–æ–ª—ñ—Ç–∏–∫–∞ –±–æ—Ç–∞ —Ç–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å

*–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –§—É–Ω–∫—Ü—ñ—ó:*
/cabinet - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∫–∞–±—ñ–Ω–µ—Ç
/link <session ID> - –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
/unlink –∞–±–æ /delete - –≤—ñ–¥–≤'—è–∑–∞—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å

*–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è:*
_Keep in mind: –≤–∏ –º–æ–∂–µ—à–µ –º–∞—Ç–∏ –ª–∏—à–µ 5 –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫_
/subscribe <session ID> - –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
/unsubscribe <session ID> - –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å
/subscriptions - —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–æ–∫
        """,
        parse_mode="Markdown",
    )


@dp.message_handler(commands=["update"])
async def manual_application_update(message: types.Message):
    _message = await message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–∏–≤–∞—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    await message.answer_chat_action("typing")

    _user = await UserModel.find_one({"telgram_id": str(message.from_user.id)})

    _application = await ApplicationModel.find_one(
        {
            "session_id": _user.session_id,
        }
    )
    if not _user or not _application:
        await _message.edit_text(
            "–í–∞—à–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /link \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ /link 1006655"
        )
        return

    if _application.last_update > datetime.now() - timedelta(minutes=20):
        await _message.edit_text(
            "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –º–µ–Ω—à–µ 20—Ö–≤ —Ç–æ–º—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    status = scraper.check(_application.session_id, retrive_all=True)

    if not status:
        await _message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞, –º–æ–∂–ª–∏–≤–æ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —á–∏ —â–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ñ –≤ –±–∞–∑—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    _statuses = []
    for s in status:
        _statuses.append(
            StatusModel(
                status=s.get("status"),
                date=s.get("date"),
            )
        )
    if len(_statuses) > len(_application.statuses):
        # find new statuses
        new_statuses = _statuses[len(_application.statuses) :]
        # notify subscribers
        await notify_subscribers()

        _msg_text = f"""
        –ú–∏ –ø–æ–º—ñ—Ç–∏–ª–∏ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ *#{_user.session_id}:*
        """

        for i, s in enumerate(new_statuses):
            _date = datetime.fromtimestamp(int(s.date) / 1000).strftime(
                "%Y-%m-%d %H:%M"
            )
            _msg_text += f"{i+1}. *{s.status}* \n_{_date}_\n\n"

        await _message.edit_text(_msg_text, parse_mode="Markdown")
    else:
        await _message.edit_text("–°—Ç–∞—Ç—É—Å–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è.")

    _application.statuses = _statuses
    _application.last_update = datetime.now()

    await _application.save()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=startup)
